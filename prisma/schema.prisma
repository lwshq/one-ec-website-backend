generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  COORDINATOR
  ADMIN
  COOPSUPERADMIN
}

model Account {
  id             Int       @id @default(autoincrement())
  password       String
  user_id        Int?
  coordinator_id Int?
  admin_id       Int?
  created_at     DateTime? @default(now())
  updated_at     DateTime? @updatedAt
  deleted_at     DateTime?

  user        User?            @relation(fields: [user_id], references: [id])
  coordinator CoopCoordinator? @relation(fields: [coordinator_id], references: [id])
  admin       Admin?           @relation(fields: [admin_id], references: [id])

  @@map("account")
}

model User {
  id             Int       @id @default(autoincrement())
  first_name     String
  middle_name    String?
  last_name      String
  birthdate      DateTime?
  email          String    @unique
  contact_number String?
  role           UserRole  @default(USER)
  created_at     DateTime? @default(now())
  updated_at     DateTime? @updatedAt
  deleted_at     DateTime?

  addresses     UserAddress[]
  payments      Payment[]
  account       Account[]
  MeterAccount  MeterAccount[]
  PasswordReset PasswordReset[]

  @@map("user")
}

model CoopCoordinator {
  id               Int       @id @default(autoincrement())
  first_name       String?
  middle_name      String?
  last_name        String?
  email            String    @unique
  contact_number   String
  coop_id          Int
  address          String?
  role             UserRole? @default(COORDINATOR)
  loginAttempts    Int       @default(0)
  lastLoginAttempt DateTime?
  created_at       DateTime? @default(now())
  updated_at       DateTime? @updatedAt
  deleted_at       DateTime?

  coop          Cooperative       @relation(fields: [coop_id], references: [id])
  account       Account[]
  roles         CoordinatorRole[]
  PasswordReset PasswordReset[]
  AdminLog      AdminLog[]

  @@map("coordinator")
}

model Admin {
  id               Int             @id @default(autoincrement())
  first_name       String
  last_name        String
  birthdate        DateTime?
  email            String          @unique
  contact_number   String?
  role             UserRole        @default(ADMIN)
  loginAttempts    Int             @default(0)
  lastLoginAttempt DateTime?
  created_at       DateTime?       @default(now())
  updated_at       DateTime?       @updatedAt
  account          Account[]
  AdminLog         AdminLog[]
  PasswordReset    PasswordReset[]

  @@map("admin")
}

model Cooperative {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  address     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  coordinators CoopCoordinator[]
  banks        CoopBank[]
  meters       MeterAccount[]
  bills        Bill[]
  settlements  Settlement[]
  Payment      Payment[]

  @@map("cooperative")
}

model CoopBank {
  id            Int       @id @default(autoincrement())
  cooperativeId Int
  name          String
  accountNumber String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?

  cooperative Cooperative @relation(fields: [cooperativeId], references: [id])

  @@map("coop_bank")
}

model UserAddress {
  id        Int       @id @default(autoincrement())
  userId    Int
  address   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  user User @relation(fields: [userId], references: [id])

  @@map("user_address")
}

model Payment {
  id        Int       @id @default(autoincrement())
  userId    Int
  billId    Int
  coopId    Int
  amount    Float
  date      DateTime
  status    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  user User        @relation(fields: [userId], references: [id])
  bill Bill        @relation(fields: [billId], references: [id])
  coop Cooperative @relation(fields: [coopId], references: [id])

  @@map("payment")
}

model Bill {
  id              Int       @id @default(autoincrement())
  meterAccountId  Int?
  coopId          Int
  fromDate        DateTime
  toDate          DateTime
  nextDate        DateTime
  cRead           Int
  pRead           Int       @default(0)
  kwhConsume      Float
  distribution    Float     @default(0.00)
  generation      Float     @default(0.00)
  sLoss           Float     @default(0.00)
  transmission    Float     @default(0.00)
  subsidies       Float     @default(0.00)
  gTax            Float     @default(0.00)
  fitAll          Float     @default(0.00)
  applied         Float     @default(0.00)
  other           Float     @default(0.00)
  rate            Float     @default(0.00)
  amount          Float
  referenceNumber String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?

  meterAccount MeterAccount? @relation(fields: [meterAccountId], references: [id])
  coop         Cooperative  @relation(fields: [coopId], references: [id])
  payments     Payment[]

  @@map("bill")
}

model MeterAccount {
  id        Int       @id @default(autoincrement())
  meterId   String
  userId    Int
  coopId    Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  user         User           @relation(fields: [userId], references: [id])
  coop         Cooperative    @relation(fields: [coopId], references: [id])
  Bill         Bill[]
  MeterAddress MeterAddress[]

  @@map("meter_account")
}

model MeterAddress {
  id            Int       @id @default(autoincrement())
  meterId       Int
  meterProvince String
  meterTown     String
  meterBrgy     String
  meterSt       String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?

  meter MeterAccount @relation(fields: [meterId], references: [id])

  @@map("meter_address")
}

model Settlement {
  id         Int       @id @default(autoincrement())
  coopId     Int
  amount     Float
  commission Float
  netAmount  Float
  date       DateTime
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?

  coop Cooperative @relation(fields: [coopId], references: [id])

  @@map("settlement")
}

model Role {
  id           Int               @id @default(autoincrement())
  name         String
  permissions  String[]          @default([])
  modules      String[]          @default([])
  coordinators CoordinatorRole[]
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  deletedAt    DateTime?

  @@map("role")
}

model CoordinatorRole {
  id            Int             @id @default(autoincrement())
  coordinatorId Int
  roleId        Int
  role          Role            @relation(fields: [roleId], references: [id])
  coordinator   CoopCoordinator @relation(fields: [coordinatorId], references: [id])
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  deletedAt     DateTime?

  @@map("coordinator_role")
}

model AdminLog {
  id        Int              @id @default(autoincrement())
  admin_id  Int?
  coor_id   Int?
  name      String
  email     String
  date      DateTime         @default(now())
  time      String
  activity  String
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  deletedAt DateTime?
  admin     Admin?           @relation(fields: [admin_id], references: [id])
  coor      CoopCoordinator? @relation(fields: [coor_id], references: [id])

  @@map("admin_log")
}

model PasswordReset {
  id        Int              @id @default(autoincrement())
  adminId   Int?
  userId    Int?
  coorId    Int?
  token     String           @unique
  expiresAt DateTime
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  deletedAt DateTime?
  admin     Admin?           @relation(fields: [adminId], references: [id])
  user      User?            @relation(fields: [userId], references: [id])
  coopCoor  CoopCoordinator? @relation(fields: [coorId], references: [id])

  @@map("password_reset")
}
